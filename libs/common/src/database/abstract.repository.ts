import { FilterQuery, Model, UpdateQuery } from 'mongoose';
import { AbstractDocument, AutoGeneratedField } from './abstract.schema';
import { Logger, NotFoundException } from '@nestjs/common';

export abstract class AbstractRepository<TDocument extends AbstractDocument> {
  protected abstract readonly logger: Logger;

  constructor(protected readonly model: Model<TDocument>) {}

  async create(
    createDto: Omit<TDocument, AutoGeneratedField>,
  ): Promise<TDocument> {
    const createdDocument = new this.model(createDto);
    return (await createdDocument.save()).toJSON() as TDocument;
  }

  async findOne(filterQuery: FilterQuery<TDocument>): Promise<TDocument> {
    const document = await this.model.findOne(filterQuery, {}, { lean: true });
    if (!document) this.handleNotFoundError(filterQuery);

    return document;
  }

  async findOneAndUpdate(
    filterQuery: FilterQuery<TDocument>,
    update: UpdateQuery<TDocument>,
  ): Promise<TDocument> {
    const document = await this.model.findOneAndUpdate(filterQuery, update, {
      lean: true,
      new: true,
    });
    if (!document) this.handleNotFoundError(filterQuery);

    return document;
  }

  async find(filterQuery?: FilterQuery<TDocument>): Promise<TDocument[]> {
    const document = this.model.find(filterQuery, {}, { lean: true });
    if (!document) this.handleNotFoundError(filterQuery);

    return document;
  }

  async findOneAndDelete(filterQuery: FilterQuery<TDocument>): Promise<any> {
    const document = await this.model.findOneAndDelete(filterQuery);

    if (!document) this.handleNotFoundError(filterQuery);
    return {
      message: 'Document deleted successfully',
      data: document,
    };
  }

  private handleNotFoundError(filterQuery: FilterQuery<TDocument>) {
    this.logger.warn(
      `Document not found for filter query: ${JSON.stringify(filterQuery)}`,
    );
    throw new NotFoundException('Document not found');
  }
}
